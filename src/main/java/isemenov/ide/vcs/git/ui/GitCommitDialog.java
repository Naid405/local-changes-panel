package isemenov.ide.vcs.git.ui;

import isemenov.ide.ui.ErrorHandlerUI;
import isemenov.ide.ui.component.FileVCSStatus;
import isemenov.ide.ui.component.LoadingDialog;
import isemenov.ide.vcs.VCSException;
import isemenov.ide.vcs.VCSFileStatus;
import isemenov.ide.vcs.git.GitService;

import javax.swing.*;
import java.awt.*;
import java.awt.event.KeyEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.nio.file.Path;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

public class GitCommitDialog extends JDialog {
    private final GitService service;
    private final Set<Path> filesToCommit;

    private JPanel contentPane;
    private JButton buttonCommit;
    private JButton buttonCancel;
    private JTextField commitMessageField;
    private JList<FileVCSStatus> fileList;
    private JButton buttonCommitPush;


    public GitCommitDialog(GitService service, Map<Path, VCSFileStatus> files) {
        this.service = service;
        setTitle("Commit tracked files");
        setContentPane(contentPane);
        setModal(true);
        getRootPane().setDefaultButton(buttonCommit);

        filesToCommit = new HashSet<>();
        DefaultListModel<FileVCSStatus> listModel = new DefaultListModel<>();
        for (Map.Entry<Path, VCSFileStatus> entry : files.entrySet()) {
            listModel.addElement(new FileVCSStatus(entry.getKey(), entry.getValue(), false));
            filesToCommit.add(entry.getKey());
        }
        fileList.setModel(listModel);

        buttonCommit.addActionListener(e -> commit(true));
        buttonCommitPush.addActionListener(e -> {
            commit(false);
            push();
        });
        buttonCancel.addActionListener(e -> onCancel());
        // call onCancel() when cross is clicked
        setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                onCancel();
            }
        });
        // call onCancel() on ESCAPE
        contentPane.registerKeyboardAction(e -> onCancel(), KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0),
                                           JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);

        pack();
    }

    private void commit(boolean closeOnComplete) {
        String commitMessage = commitMessageField.getText();
        if (commitMessage.length() < 1) {
            ErrorHandlerUI.showWarning("Commit message must be provided");
            return;
        }
        new SwingWorker<Void, Void>() {
            @Override
            protected Void doInBackground() {
                try {
                    service.commitFiles(commitMessage, filesToCommit);
                } catch (VCSException e) {
                    ErrorHandlerUI.showError(e);
                }
                return null;
            }

            @Override
            protected void done() {
                if (closeOnComplete)
                    dispose();
            }
        }.execute();
    }

    private void push() {
        LoadingDialog loadingDialog = new LoadingDialog("Pushing",
                                                        () -> {
                                                            service.push();
                                                            return "Pushed";
                                                        });
        loadingDialog.execute();
        dispose();
    }

    private void onCancel() {
        // add your code here if necessary
        dispose();
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        contentPane = new JPanel();
        contentPane.setLayout(new BorderLayout(0, 0));
        contentPane.setMinimumSize(new Dimension(500, 208));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new BorderLayout(0, 0));
        contentPane.add(panel1, BorderLayout.CENTER);
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new BorderLayout(0, 0));
        panel1.add(panel2, BorderLayout.SOUTH);
        final JLabel label1 = new JLabel();
        label1.setText("Commit message (required)");
        panel2.add(label1, BorderLayout.CENTER);
        commitMessageField = new JTextField();
        commitMessageField.setMinimumSize(new Dimension(14, 50));
        commitMessageField.setPreferredSize(new Dimension(14, 50));
        panel2.add(commitMessageField, BorderLayout.SOUTH);
        final JScrollPane scrollPane1 = new JScrollPane();
        panel1.add(scrollPane1, BorderLayout.CENTER);
        fileList = new JList();
        fileList.setMinimumSize(new Dimension(0, 100));
        fileList.setPreferredSize(new Dimension(0, 100));
        fileList.setSelectionMode(0);
        scrollPane1.setViewportView(fileList);
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new BorderLayout(0, 0));
        contentPane.add(panel3, BorderLayout.SOUTH);
        final JPanel panel4 = new JPanel();
        panel4.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 5));
        panel3.add(panel4, BorderLayout.SOUTH);
        buttonCommit = new JButton();
        buttonCommit.setText("Commit");
        panel4.add(buttonCommit);
        buttonCommitPush = new JButton();
        buttonCommitPush.setText("Commit,Push");
        panel4.add(buttonCommitPush);
        buttonCancel = new JButton();
        buttonCancel.setText("Cancel");
        panel4.add(buttonCancel);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }
}
